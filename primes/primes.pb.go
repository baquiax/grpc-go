// Code generated by protoc-gen-go. DO NOT EDIT.
// source: primes/primes.proto

package primes

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type Request struct {
	Input                int32    `protobuf:"varint,2,opt,name=input,proto3" json:"input,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Request) Reset()         { *m = Request{} }
func (m *Request) String() string { return proto.CompactTextString(m) }
func (*Request) ProtoMessage()    {}
func (*Request) Descriptor() ([]byte, []int) {
	return fileDescriptor_9b9f4be1f8931727, []int{0}
}

func (m *Request) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Request.Unmarshal(m, b)
}
func (m *Request) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Request.Marshal(b, m, deterministic)
}
func (m *Request) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Request.Merge(m, src)
}
func (m *Request) XXX_Size() int {
	return xxx_messageInfo_Request.Size(m)
}
func (m *Request) XXX_DiscardUnknown() {
	xxx_messageInfo_Request.DiscardUnknown(m)
}

var xxx_messageInfo_Request proto.InternalMessageInfo

func (m *Request) GetInput() int32 {
	if m != nil {
		return m.Input
	}
	return 0
}

type Result struct {
	Factor               int32    `protobuf:"varint,1,opt,name=factor,proto3" json:"factor,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Result) Reset()         { *m = Result{} }
func (m *Result) String() string { return proto.CompactTextString(m) }
func (*Result) ProtoMessage()    {}
func (*Result) Descriptor() ([]byte, []int) {
	return fileDescriptor_9b9f4be1f8931727, []int{1}
}

func (m *Result) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Result.Unmarshal(m, b)
}
func (m *Result) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Result.Marshal(b, m, deterministic)
}
func (m *Result) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Result.Merge(m, src)
}
func (m *Result) XXX_Size() int {
	return xxx_messageInfo_Result.Size(m)
}
func (m *Result) XXX_DiscardUnknown() {
	xxx_messageInfo_Result.DiscardUnknown(m)
}

var xxx_messageInfo_Result proto.InternalMessageInfo

func (m *Result) GetFactor() int32 {
	if m != nil {
		return m.Factor
	}
	return 0
}

func init() {
	proto.RegisterType((*Request)(nil), "primes.Request")
	proto.RegisterType((*Result)(nil), "primes.Result")
}

func init() { proto.RegisterFile("primes/primes.proto", fileDescriptor_9b9f4be1f8931727) }

var fileDescriptor_9b9f4be1f8931727 = []byte{
	// 160 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x12, 0x2e, 0x28, 0xca, 0xcc,
	0x4d, 0x2d, 0xd6, 0x87, 0x50, 0x7a, 0x05, 0x45, 0xf9, 0x25, 0xf9, 0x42, 0x6c, 0x10, 0x9e, 0x92,
	0x3c, 0x17, 0x7b, 0x50, 0x6a, 0x61, 0x69, 0x6a, 0x71, 0x89, 0x90, 0x08, 0x17, 0x6b, 0x66, 0x5e,
	0x41, 0x69, 0x89, 0x04, 0x93, 0x02, 0xa3, 0x06, 0x6b, 0x10, 0x84, 0xa3, 0xa4, 0xc0, 0xc5, 0x16,
	0x94, 0x5a, 0x5c, 0x9a, 0x53, 0x22, 0x24, 0xc6, 0xc5, 0x96, 0x96, 0x98, 0x5c, 0x92, 0x5f, 0x24,
	0xc1, 0x08, 0x56, 0x00, 0xe5, 0x19, 0xb9, 0x71, 0x09, 0x05, 0x80, 0x0c, 0x73, 0x49, 0x4d, 0xce,
	0xcf, 0x2d, 0xc8, 0x2f, 0xce, 0x2c, 0xc9, 0xcc, 0xcf, 0x13, 0x32, 0xe0, 0xe2, 0x74, 0x4e, 0xcc,
	0x49, 0x2e, 0xcd, 0x49, 0x2c, 0x49, 0x15, 0xe2, 0xd7, 0x83, 0x5a, 0x0e, 0xb5, 0x4b, 0x8a, 0x0f,
	0x21, 0x00, 0x32, 0x5b, 0x89, 0xc1, 0x80, 0xd1, 0x89, 0x23, 0x0a, 0xea, 0xa8, 0x24, 0x36, 0xb0,
	0x1b, 0x8d, 0x01, 0x01, 0x00, 0x00, 0xff, 0xff, 0x97, 0x73, 0xb4, 0x78, 0xba, 0x00, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// PrimeDecompositionClient is the client API for PrimeDecomposition service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type PrimeDecompositionClient interface {
	Calculate(ctx context.Context, in *Request, opts ...grpc.CallOption) (PrimeDecomposition_CalculateClient, error)
}

type primeDecompositionClient struct {
	cc *grpc.ClientConn
}

func NewPrimeDecompositionClient(cc *grpc.ClientConn) PrimeDecompositionClient {
	return &primeDecompositionClient{cc}
}

func (c *primeDecompositionClient) Calculate(ctx context.Context, in *Request, opts ...grpc.CallOption) (PrimeDecomposition_CalculateClient, error) {
	stream, err := c.cc.NewStream(ctx, &_PrimeDecomposition_serviceDesc.Streams[0], "/primes.PrimeDecomposition/Calculate", opts...)
	if err != nil {
		return nil, err
	}
	x := &primeDecompositionCalculateClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type PrimeDecomposition_CalculateClient interface {
	Recv() (*Result, error)
	grpc.ClientStream
}

type primeDecompositionCalculateClient struct {
	grpc.ClientStream
}

func (x *primeDecompositionCalculateClient) Recv() (*Result, error) {
	m := new(Result)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// PrimeDecompositionServer is the server API for PrimeDecomposition service.
type PrimeDecompositionServer interface {
	Calculate(*Request, PrimeDecomposition_CalculateServer) error
}

// UnimplementedPrimeDecompositionServer can be embedded to have forward compatible implementations.
type UnimplementedPrimeDecompositionServer struct {
}

func (*UnimplementedPrimeDecompositionServer) Calculate(req *Request, srv PrimeDecomposition_CalculateServer) error {
	return status.Errorf(codes.Unimplemented, "method Calculate not implemented")
}

func RegisterPrimeDecompositionServer(s *grpc.Server, srv PrimeDecompositionServer) {
	s.RegisterService(&_PrimeDecomposition_serviceDesc, srv)
}

func _PrimeDecomposition_Calculate_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Request)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(PrimeDecompositionServer).Calculate(m, &primeDecompositionCalculateServer{stream})
}

type PrimeDecomposition_CalculateServer interface {
	Send(*Result) error
	grpc.ServerStream
}

type primeDecompositionCalculateServer struct {
	grpc.ServerStream
}

func (x *primeDecompositionCalculateServer) Send(m *Result) error {
	return x.ServerStream.SendMsg(m)
}

var _PrimeDecomposition_serviceDesc = grpc.ServiceDesc{
	ServiceName: "primes.PrimeDecomposition",
	HandlerType: (*PrimeDecompositionServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Calculate",
			Handler:       _PrimeDecomposition_Calculate_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "primes/primes.proto",
}
